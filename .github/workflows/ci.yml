name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: investwise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 pytest pytest-cov pytest-django bandit safety pip-audit

    - name: Set up environment variables
      run: |
        echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=False" >> $GITHUB_ENV
        echo "DJANGO_DATABASE_URL=postgres://postgres:postgres@localhost:5432/investwise_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV

    - name: Run flake8 linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run bandit security linting
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: Run pip-audit for vulnerability scanning
      run: |
        pip-audit --desc --format=json --output=vulnerabilities.json
      continue-on-error: true

    - name: Run Django system checks
      run: |
        cd backend
        python manage.py check --settings=investwise.settings.test

    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --settings=investwise.settings.test

    - name: Run tests with coverage
      run: |
        cd backend
        python -m pytest --cov=apps --cov=investwise --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          vulnerabilities.json

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-audit:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install safety bandit pip-audit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run comprehensive bandit scan
      run: |
        bandit -r backend/ -f json -o bandit-comprehensive.json || true
        bandit -r backend/ --severity-level low

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-security-reports
        path: |
          safety-report.json
          bandit-comprehensive.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security-audit]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here